version: "3"

networks:
  reverse-proxy-net:
    driver: overlay

# configs:
#   traefik.toml:
#     file: ./traefik.toml

services:
  reverse-proxy:
    # The official v2.0 Traefik docker image
    image: traefik:v2.0
    networks:
      - reverse-proxy-net
    # Enables the web UI and tells Traefik to listen to docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/traefik.toml
      - ./acme.json:/acme.json
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        max_attempts: 3
        condition: on-failure
    # dynamic configuration
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.local`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      # - "traefik.http.routers.api.entrypoints=web-secured"
      # - "traefik.http.routers.api.tls"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$G.PxJEL6$$mZDPE.wWHP2e3E6fnfvuD."

  app:
    # A container that exposes an API to show its IP address
    image: linrium/node-app:1.0.2
    depends_on:
      - reverse-proxy
      - redis
    networks:
      - reverse-proxy-net
    deploy:
      replicas: 3
      restart_policy:
        max_attempts: 3
        condition: on-failure
      update_config:
        parallelism: 3
        delay: 10s
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.app-http.middlewares=auth"
      # - "traefik.http.middlewares.whoami-https.redirectscheme.scheme=https"
      # - "traefik.http.routers.whoami-http.entrypoints=web"
      - "traefik.http.routers.app-http.rule=Host(`app.local`)"
      # - "traefik.http.routers.whoami-http.middlewares=whoami-https@docker"
      # - "traefik.http.routers.whoami.entrypoints=web-secure"
      # - "traefik.http.routers.whoami.tls=true"
      # - "traefik.http.routers.whoami.tls.certresolver=default"
      - "traefik.http.services.app.loadbalancer.sticky=true"
      - "traefik.http.services.app.loadbalancer.sticky.cookie.name=StickyCookie"
